/*
* I Language random module.
* Version: 0.1.0

* Copyright (c) 2023-present ElBe Development.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the 'Software'),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/


/////////////
// IMPORTS //
/////////////

import _core


////////////////////
// RANDOM INTEGER //
////////////////////

/*
* Returns a random integer between the given mini- and maximum.
*
* IMPORTANT SECURITY NOTE:
*   Standard pseudo-random generators are not suitable for security/cryptographic purposes.
*   This library uses such generators.
*
* @params
* minimum (int): Lowest possible value to be generated.
* maximum (int): Highest possible value to be generated.
*
* @return
* Int: Random integer.
*/
int randint(int minimum, int maximum) {

    return _core.Random.randint(minimum, maximum)
}


/////////////
// CHOICES //
/////////////

/*
* Returns a random value from a given list.
*
* IMPORTANT SECURITY NOTE:
*   Standard pseudo-random generators are not suitable for security/cryptographic purposes.
*   This library uses such generators.
*
*
* @params
* iterable (list): List to return a random choice from.
* choices  (list): Choices to return form the iterable. If choices is bigger than the iterable, the remaining values will be skipped.
*
* @return
* Any: Chosen object(s) from the iterable.
*/
function choices(list iterable, int choices = 1) {
    return _core.Random.choices(iterable, choices)
}


/////////////
// SHUFFLE //
/////////////

/*
* Returns a shuffled version of the given list.
*
* IMPORTANT SECURITY NOTE:
*   Standard pseudo-random generators are not suitable for security/cryptographic purposes.
*   This library uses such generators.
*
* @params
* iterable (list): List to shuffle.
*
* @return
* list: Shuffled list.
*/
list shuffle(list iterable) {
    return _code.Random.shuffle(iterable)
}